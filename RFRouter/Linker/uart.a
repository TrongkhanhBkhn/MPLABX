;#include "uart.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;/***************Ham truyen mot ky tu*********************/
;void UART_SendChar(uint8_t data)
; 0004 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 0005    /* Wait for empty transmit buffer*/
; 0004 0006     while( !( UCSRA & (1<<UDRE)) );
;	data -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0004 0007     /* Put data into buffer, sends the data*/
; 0004 0008     UDR = data;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0004 0009 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;/***************Ham truyen mot chuoi ky tu*********************/
;void UART_SendString(uint8_t *data)
; 0004 000C {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0004 000D     while(*data !='\0')
;	*data -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0004 000E     {
; 0004 000F        UART_SendChar(*data);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0004 0010        data ++;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0004 0011     };
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0004 0012 
; 0004 0013 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;/***************Ham nhan mot ky tu*********************/
;uint8_t UART_RecieveChar(void)
; 0004 0016 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0004 0017     /* Wait for data to be received*/
; 0004 0018     while( !(UCSRA & (1<<RXC)) );
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0004 0019     /* Get and return received data from buffer*/
; 0004 001A     return UDR;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0004 001B }
;PCODE: $00000037 VOL: 0
;/***************Ham nhan mot chuoi ky tu*********************/
;void UART_RecieveString(uint8_t *data)
; 0004 001E {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0004 001F     *data = UART_RecieveChar();
;	*data -> Y+0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0004 0020     while(*data !='\0')
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0004 0021     {
; 0004 0022         data++;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0004 0023         *data = UART_RecieveChar();
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0004 0024     };
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0004 0025 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;void USART_Flush(void)
; 0004 0027 {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0004 0028     uint8_t dummy;
; 0004 0029     while( UCSRA & (1<<RXC) ) dummy = UDR;
;PCODE: $0000004F VOL: 0
;	dummy -> R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0004 002A }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;void ClearBuffer(uint8_t buffer[],uint8_t size)
; 0004 002D {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0004 002E     uint8_t i = 0;
; 0004 002F     uint8_t dummy;
; 0004 0030     for(i = 0; i<size; i++)
;PCODE: $0000005D VOL: 0
;	buffer -> Y+3
;	size -> Y+2
;	i -> R17
;	dummy -> R16
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0004 0031     buffer[i] = dummy;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0004 0032 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
